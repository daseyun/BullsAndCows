{"version":3,"sources":["gameUtil.js","components/GameOver.js","components/AttemptLogs.js","App.js","reportWebVitals.js","index.js"],"names":["generateRandomNumber","validNums","randomIdx","Math","floor","random","length","genNumber","splice","push","i","determineBullsAndCows","secretNum","attempt","bulls","cows","toString","possibleCows","j","includes","GameOver","props","gameProgress","gameState","secretNumber","AttemptLogs","className","logs","map","log","idx","App","useState","Array","from","updateLogs","_setSecretNumber","setAttempt","setGameState","handleInput","set","Set","has","isNaN","add","size","isAttemptProper","Error","isAlreadyAttempted","updatedLog","newLog","insertAttemptLog","isGameOver","error","useEffect","document","title","type","onKeyPress","ev","key","onChange","e","target","value","disabled","placeholder","onClick","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fb490713.chunk.js","sourcesContent":["// generate a random number of 4 digits\n// cannot start with 0\n// each digits must be unique\nexport function generateRandomNumber() {\n  let validNums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n  // generate random index from validNums\n  let randomIdx = Math.floor(Math.random() * validNums.length);\n  // remove idx element from validNums and store it.\n  let genNumber = validNums.splice(randomIdx, 1)[0];\n\n  // 0 is now valid digit\n  validNums.push(0);\n  for (let i = 0; i < 3; i++) {\n    randomIdx = Math.floor(Math.random() * validNums.length);\n    // same as above, but push the existing element to next digit\n    genNumber = genNumber * 10 + validNums.splice(randomIdx, 1)[0];\n  }\n  return genNumber;\n}\n\n// find bulls and cows and spit out string in format: \"1A1B\"\n// A: bulls -- correct number && position\n// B: cows -- correct number\nexport function determineBullsAndCows(secretNum, attempt) {\n  let bulls = 0;\n  let cows = 0;\n\n  secretNum = secretNum.toString();\n  attempt = attempt.toString();\n\n  let possibleCows = [];\n  for (let i = 0; i < secretNum.length; i++) {\n    if (secretNum[i] === attempt[i]) {\n      bulls += 1;\n    } else {\n      possibleCows.push(attempt[i]);\n    }\n  }\n  for (let j = 0; j < possibleCows.length; j++) {\n    if (secretNum.includes(possibleCows[j])) {\n      cows += 1;\n    }\n  }\n  return bulls + \"A\" + cows + \"B\";\n}\n\n// check if attempt was already inputted before.\nexport function isAlreadyAttempted(logs, attempt) {\n  for (let i = 0; i < logs.length; i++) {\n    if (logs[i][0] === attempt) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// check if attempt is valid: 4 digits. all unique. no start with 0.\nexport function isAttemptProper(attempt) {\n  attempt = attempt.toString();\n  let set = new Set();\n\n  // can't start with 0.\n  if (attempt[0] === \"0\") {\n    return false;\n  }\n  // check for unique 4 digits.\n  for (let i = 0; i < attempt.length; i++) {\n    if (set.has(attempt[i]) || isNaN(attempt[i])) {\n      return false;\n    }\n    set.add(attempt[i]);\n  }\n\n  if (set.size !== 4) {\n    return false;\n  }\n\n  return true;\n}\n\n// return \"WIN\", \"LOSE\", \"IN PROGRESS\"\nexport function isGameOver(logs) {\n  for (let i = 0; i < 8; i++) {\n    // find win condition\n    if (logs[i][1] === \"4A0B\") {\n      return \"WIN\";\n    }\n    // any entry within 8 is empty.\n    if (logs[i].length === 0) {\n      return \"IN PROGRESS\";\n    }\n  }\n  // no win was found within 8 tries.\n  return \"LOSE\";\n}\n","function GameOver(props) {\n  let gameProgress = <h1> &nbsp;</h1>;\n  if (props.gameState === \"WIN\") {\n    gameProgress = <h1>You Win!</h1>;\n  } else if (props.gameState === \"LOSE\") {\n    gameProgress = <h1>You Lose! Answer: {props.secretNumber}</h1>;\n  }\n\n  return <div>{gameProgress}</div>;\n}\n\nexport default GameOver;\n","import \"milligram\";\nfunction AttemptLogs(props) {\n  return (\n    <div className=\"column\">\n      <table>\n        <thead>\n          <tr>\n            {/* table padding */}\n            <th> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>\n            <th>Guess</th>\n            <th>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.logs.map((log, idx) => (\n            <tr key={idx}>\n              <td>{idx + 1}. </td>\n              <td>{log[0]}</td>\n              <td>{log[1]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default AttemptLogs;\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  generateRandomNumber,\n  isAlreadyAttempted,\n  isAttemptProper,\n  determineBullsAndCows,\n  isGameOver,\n} from \"./gameUtil\";\nimport GameOver from \"./components/GameOver\";\nimport AttemptLogs from \"./components/AttemptLogs\";\n\nfunction App() {\n  const [logs, updateLogs] = useState(Array.from(Array(8), () => []));\n  const [secretNumber, _setSecretNumber] = useState(generateRandomNumber());\n  const [attempt, setAttempt] = useState(\"\");\n  const [gameState, setGameState] = useState(\"IN PROGRESS\");\n\n  function handleInput() {\n    try {\n      if (!isAttemptProper(attempt)) {\n        throw new Error(\"invalid number\");\n      }\n      if (isAlreadyAttempted(logs, attempt)) {\n        throw new Error(\"number already guessed\");\n      }\n\n      let updatedLog = insertAttemptLog();\n      updateLogs(updatedLog);\n      // clear input field\n      setAttempt(\"\");\n      // calculate gamestate on proper submission\n      setGameState(isGameOver(updatedLog));\n    } catch (error) {\n      // clear input for invalid inputs as well\n      setAttempt(\"\");\n    }\n  }\n\n  // insert the new attempt in most recent slot. return new log.\n  function insertAttemptLog() {\n    let newLog = [...logs]; // create copy\n    for (let i = 0; i < 8; i++) {\n      if (newLog[i].length === 0) {\n        // check bulls n cows.\n        // update attempts as tuple: [\"1234\", \"1A2B\"]\n        newLog[i] = [attempt, determineBullsAndCows(secretNumber, attempt)];\n        break;\n      }\n    }\n    return newLog;\n  }\n\n  // update attempt as input changes.\n  function handleInputChange(e) {\n    setAttempt(e.target.value);\n  }\n\n  // reset the states, effectively starting a new game.\n  function reset() {\n    updateLogs(Array.from(Array(8), () => []));\n    _setSecretNumber(generateRandomNumber());\n    setAttempt(\"\");\n    setGameState(\"IN PROGRESS\");\n  }\n\n  // handle enter to \"guess\" in input.\n  // https://github.com/NatTuck/scratch-2021-01/blob/bea430447baec22eb1a5e41d4d1fcce0191b36a3/4550/0202/hangman/src/App.js#L58\n  function keyPress(ev) {\n    if (ev.key === \"Enter\") {\n      handleInput();\n    }\n  }\n\n  // when this function renders, set title\n  useEffect(() => {\n    document.title = \"Bulls and Cows\";\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h1>Bulls and Cows</h1>\n      </div>\n\n      <div className=\"row\">\n        <input\n          className=\"column column-offset-20 column-40\"\n          type=\"number\"\n          onKeyPress={keyPress}\n          onChange={handleInputChange}\n          value={attempt}\n          disabled={gameState !== \"IN PROGRESS\" ? \"disabled\" : \"\"}\n          placeholder=\"1234\"\n        ></input>\n        <button\n          disabled={gameState !== \"IN PROGRESS\" ? \"disabled\" : \"\"}\n          onClick={() => handleInput()}\n        >\n          Guess\n        </button>\n        <button className=\"button button-outline\" onClick={() => reset()}>\n          Reset\n        </button>\n      </div>\n      <div className=\"row\">\n        <AttemptLogs logs={logs} />\n      </div>\n      <div className=\"row\">\n        <GameOver gameState={gameState} secretNumber={secretNumber} />\n      </div>\n      <a\n        href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\"\n        rel=\"noreferrer\"\n        target=\"_blank\"\n      >\n        Bulls and Cows (Wikipedia)\n      </a>\n      <br />\n      <a href=\"http://danyun.me\">danyun.me</a>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"milligram\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}